apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        rootProject.ext.appTargetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled true

        buildConfigField "String", "GIT_REVISION", "\"${getGitVersion()}\""
        buildConfigField "String", "BUILD_DATE", "\"${new Date().toLocaleString()}\""

        ndk {
            abiFilters "armeabi-v7a"
        }
    }

    signingConfigs {
        debug { storeFile file("debug.keystore") }
//        demo_key {
//            keyPassword '123456'
//            storeFile file('D:/Soft_Dev/workspace/key_store/nim_key.jks')
//            storePassword '123456'
//        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            manifestPlaceholders = [AMAP_KEY: "09fd4efd3e28e9bf1f449ecec7d34bfe"]
            ext.enableCrashlytics = false
            // 自定义输出配置
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "release_Robot_${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                        if (variant.buildType.isDebuggable()) {
                            fileName = "debug_Robot_${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                        }
                        outputFileName = new File("", fileName)
                    }
                }
            }
        }

        release {
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            proguardFile('proguard.cfg')
            manifestPlaceholders = [AMAP_KEY: "ee20324fba1c7f4ad7a4a207e7f08e8d"]
            ext.enableCrashlytics = true
        }
    }

    productFlavors {
        armv7 {
        }
    }

    sourceSets {
        main {
//            manifest.srcFile 'src/main/AndroidManifest.xml'
//            java.srcDirs = ['src/main/java']
//            resources.srcDirs = ['src/main/java']
//            aidl.srcDirs = ['src']
//            renderscript.srcDirs = ['src']
            res.srcDirs = ['src/main/res', 'src/main/res-rp']
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    dexOptions {
        preDexLibraries false
        jumboMode true
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }

    flavorDimensions "rc"


    compileOptions {
        sourceCompatibility rootProject.ext.appSourceCompatibility
        targetCompatibility rootProject.ext.appTargetCompatibility
    }

    /*
    android.packagingOptions {
        pickFirst 'lib/armeabi-v7a/libopencv_java3.so'
        pickFirst 'lib/arm64-v8a/libopencv_java3.so'
    }
    */
}

buildscript {
    repositories {
        maven { url 'https://fabric-artifacts.s3.amazonaws.com/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

repositories {
    flatDir {
        dirs 'aars'
    }
    mavenCentral()
//    maven { url 'https://fabric-artifacts.s3.amazonaws.com/public' }
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation project(':uikit')
    implementation project(':jrmfneteaselib')
    implementation project(':avchatkit')
    implementation(name: 'HMS-SDK-2.4.0.300', ext: 'aar')
    //华为推送服务
    implementation 'com.google.firebase:firebase-messaging:11.6.0'
    //11.6.0
    implementation 'com.google.android.gms:play-services-base:11.6.0'
    implementation 'com.meizu.flyme.internet:push-internal:3.4.2@aar'
    implementation 'com.netease.nimlib:jsbridge:1.3.1'
    implementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true
    }
    implementation files('libs/Msc.jar')
    implementation files('libs/unity-classes.jar')
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    //utilcode
    implementation 'com.blankj:utilcode:1.17.2'
    implementation files('libs/okhttputils-2_6_2.jar')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    //    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    //    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation files('libs/bdasr_V3_20180320_9066860.jar')
    implementation files('libs/com.baidu.tts_2.3.2.20180419_5a5fec8.jar')
}

def static getGitVersion() {
    try {
        return 'git rev-parse --short HEAD'.execute().text.trim()
    } catch (Throwable th) {
        th.printStackTrace()
        return ""
    }
}

def static releaseTime() {
    return new Date().format('yyyyMMdd')
}

apply plugin: 'com.google.gms.google-services'